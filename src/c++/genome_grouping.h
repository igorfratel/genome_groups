#ifndef __GENOME_GROUPING_H__
#define __GENOME_GROUPING_H__

#include <fstream>
#include <map>
#include <string>
#include <algorithm>
#include "Hungarian.h"
#include "GenomicNeighborhood.h"

/*Receives a file containing all the genomic neighborhoods (as output by parse_neighborhood.py),
 *a vector of protein clusters and the desired genomic neighborhood clustering method.*/
/*INCOMPLETE*/
void genome_clustering(char* neighborhoods_file, std::vector<std::vector<std::string>> &clusters,
                       char *method);

/*Receives two genomic neighborhoods and a vector of clusters.
 *Returns the MWM porthodom score between the two neighborhoods
 *(Using the hungarian algorithm and the porthodom scoring formula).*/
double compare_neighborhoods(GenomicNeighborhood g1, GenomicNeighborhood g2,
                             std::vector<std::vector<std::string>> &clusters);

/*Receives two genomic neighborhoods and a vector of clusters.
 *Fills an integer matrix where matrix[i][j] is 1 if the i-th protein of g1 and the j-th protein of
 *g2 are in the same cluster and 0 otherwise.*/
std::vector<std::vector<int>> fill_assignment_matrix(GenomicNeighborhood g1, GenomicNeighborhood g2,
                                                     std::vector<std::vector<std::string>> &clusters);

/*Receives two proteins and a list of clusters.
 *Returns 1 if it finds both proteins in the same cluster and 0 otherwise.*/
int is_grouped(protein_info_t my_prot, protein_info_t my_prot2,
               std::vector<std::vector<std::string>> &clusters);

/*Receives a file generated by parse_neighborhood.py.
 *Returns a vector of genomic neighborhoods, filled with the information from the file.*/
std::vector<GenomicNeighborhood> parse_neighborhoods(char* neighborhoods_file);

#endif
